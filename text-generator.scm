;; Asbjørn Brændeland April  2009
;; INF2810 -- Mandatory Assignment 4
;; n-grams and weighted random signals

(define TEXT-GENERATOR 'OK) ; Tells the n-gram tables and the random generator
                            ; not to run their respective debugging codes.
(load "n-gram-tables.scm")
(load "random-stream.scm")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                    TEXT GENERATOR                                  ;;
;;                                   Unfinished Shell                                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;----------------------------------------------------------------------------------
(define rng (random-number-generator))

;; weighted random signal generator
(define (random-text-signal rand-num            ; uskalert random-tall
                            weighted-signals)   ; raden med siste-tegnene | ordene
                                                ; i grammet og deres vekter (frekvenser)
  (define (signal-value signal) (mcar signal))  ; tegnet | ordet til et signal i raden
  (define (signal-weight signal) (mcdr signal)) ; signalets vekt

  ; Run through the signals while updating the draw variable until
  ; the relation between draw and the current signal satisfies the appropriate test,
  ; and then return the current signal
  (define (loop draw signals)
    --BODY--)
 
  ; Sum up weights of all signals:
  (define (sum-signals weighted-signals)
    (if (not (eq? weighted-signals '()))
        (+ (signal-weight (mcar weighted-signals))
           (sum-signals (cdr weighted-signals)))
        0))
  
  ; loop with rand-num scaled down to the sum of the signal weights as the first
  ; and weighted signals as the second argument
  (loop (sum-signals (modulo (rng) (sum-signals weighted-signals)) (weighted-signals)))

;----------------------------------------------------------------------------------
;; text generators

;; Each text generator procedure has
;; - a n-grams table (a parameter)
;; - a random number generator,
;; - a START variable with the first n-gram in the text represented in the table,
;; and
;; - a GENERATE procedure for generating the text stream.

;; GENERATE takes as argument or arguments
;; - the signal or signals immediately preceeding the current signal,
;; - looks up the corresponding row and,
;; if the row was found,
;; - passes this and a random number to the RANDOM-TEXT-SIGNAL procedure above, and
;; - uses the preeding signals and the returned random signal to add to the
;;   output stream and proceed recursively with its generating process.
;; If the row was not found, GENERATE
;; - uses the START variable to get the required signals for the output stream
;;   and the next argument or arguments for the recursive call.

;; inf brief:
;; GENRATE looks up the row.
;; if the row was found GENRATE keeps on as usual,
;; and if not GENRATE goes back to start
;; and resumes its text generating from there.

;; For each call GENERATE returns the stream where the first of the preceeding
;; signals is cons'ed onto the subsequent stream which is generated by recursive
;; calls to GENERATE.

;; The procedure is called initially with the n - 1 first items in the START
;; variable as argument.

;; E.g. the GENERATE procedure in RANDOM-TRI-TEXT has just recieved A and B as
;; the two preceeding signals. It then asks its trigrams table to look up the
;; corresponding row, and, if a row was found, passes this together with a fresh
;; random number to RANDOM-SIGNAL, cons'es A onto the rest of the output stream,
;; which is generated by a recursive call to GENERATE with B as the first and the
;; signal returned from RANDOM-TEXT-SIGNAL as the second parameter.
;; If the row was not found GENERATE sends the first signal in START to the output
;; stream and the second and the third signal as arguments to the recusive call.

;----------------------------------------------------------------------------------
;; bigrams based text generator

(define (random-bi-text bigrams)
  (define next-rand (random-number-generator))
  (define start (bigrams 'first-gram))
  (define (generate a)
    --DO-THE-GENERATING--)
  (generate ---FROM-START---))

;----------------------------------------------------------------------------------
;; trigrams based text generator

(define (random-tri-text trigrams)
  (define next-rand (random-number-generator))
  (define start (trigrams 'first-gram))
  (define (generate a b)
    --DO-THE-GENERATING--)
  (generate ---FROM-START---))

;----------------------------------------------------------------------------------
;; quadragrams based text generator

(define (random-quadra-text quadragrams)
  (define next-rand (random-number-generator))
  (define start (quadragrams 'first-gram))
  (define (generate s1 s2 s3)
    --DO-THE-GENERATING--)
  (generate ---FROM-START---))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                                                                 ;;
;; DEBUGGING DEBUGGING DEBUGGING DEBUGGING DEBUGGING DEBUGGING DEBUGGING DEBUGGING ;;
;;                                                                                 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(if (not (namespace-defined? 'TEXTS))
    (begin
      (load "Debug/debug-utils.scm")

      ;; Add random-bi-text, random-tri-text and random-quadra-text to the ready list
      ;; in turn, when they are ready.
      (set! ready '())

      (load "Debug/debug-text-generator.scm")))
